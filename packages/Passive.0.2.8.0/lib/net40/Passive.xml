<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Passive</name>
    </assembly>
    <members>
        <member name="T:Passive.Diagnostics.QueryTrace">
            <summary>
            Static class to enable tracing.
            </summary>
        </member>
        <member name="M:Passive.Diagnostics.QueryTrace.InvokeQueryBegin(Passive.Diagnostics.QueryTraceEventArgs)">
            <summary>
            Invokes the query begin event.
            </summary>
            <param name="e">The <see cref="T:Passive.Diagnostics.QueryTraceEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="M:Passive.Diagnostics.QueryTrace.InvokeQueryEnd(Passive.Diagnostics.QueryTraceEventArgs)">
            <summary>
            Invokes the query end event.
            </summary>
            <param name="e">The <see cref="T:Passive.Diagnostics.QueryTraceEventArgs"/> instance containing the event data.</param>
        </member>
        <member name="E:Passive.Diagnostics.QueryTrace.QueryBegin">
            <summary>
            Occurs when a query is started.
            </summary>
        </member>
        <member name="E:Passive.Diagnostics.QueryTrace.QueryEnd">
            <summary>
            Occurs when a query ends.
            </summary>
        </member>
        <member name="T:Passive.Diagnostics.QueryTraceEventArgs">
            <summary>
            Class that describes the arguemnts to a query trace event.
            </summary>
        </member>
        <member name="M:Passive.Diagnostics.QueryTraceEventArgs.#ctor(System.String,System.Collections.Generic.IEnumerable{System.Object},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Passive.Diagnostics.QueryTraceEventArgs"/> class.
            </summary>
            <param name="sql">The SQL.</param>
            <param name="arguments">The arguments.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Passive.Diagnostics.QueryTraceEventArgs.Arguments">
            <summary>
            Gets or sets the arguments.
            </summary>
            <value>
            The arguments.
            </value>
        </member>
        <member name="P:Passive.Diagnostics.QueryTraceEventArgs.Sql">
            <summary>
            Gets the SQL.
            </summary>
        </member>
        <member name="P:Passive.Diagnostics.QueryTraceEventArgs.Context">
            <summary>
            Gets the Context.
            </summary>
        </member>
        <member name="P:Passive.Diagnostics.QueryTraceEventArgs.Token">
            <summary>
            Gets the token.
            </summary>
        </member>
        <member name="T:Passive.Dialect.DatabaseDialect">
            <summary>
            Class that describes a variant of the SQL Language.
            </summary>
        </member>
        <member name="F:Passive.Dialect.DatabaseDialect.RowNumberPagingFormat">
            <summary>
            Constant that describes the ROW_NUMBER() method of paging.
            </summary>
        </member>
        <member name="F:Passive.Dialect.DatabaseDialect.OffsetPagingFormat">
            <summary>
            Constant that describes the OFFSET/FETCH method of paging.
            </summary>
        </member>
        <member name="M:Passive.Dialect.DatabaseDialect.GetPagingSql(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the SQL statement for paging given the supplied information.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columns">The columns.</param>
            <param name="orderBy">The order by.</param>
            <param name="where">The where.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="currentPage">The current page.</param>
            <returns></returns>
        </member>
        <member name="M:Passive.Dialect.DatabaseDialect.GetIdentitySql">
            <summary>
            Gets the SQL for retrieving the just-inserted identity.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Passive.Dialect.SqlCompact4Dialect">
            <summary>
            Class that describes the SQL CE 4.0 dialect.
            </summary>
        </member>
        <member name="M:Passive.Dialect.SqlCompact4Dialect.GetPagingSql(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the SQL statement for paging given the supplied information.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columns">The columns.</param>
            <param name="orderBy">The order by.</param>
            <param name="where">The where.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="currentPage">The current page.</param>
            <returns></returns>
        </member>
        <member name="T:Passive.Dialect.SqlServerDialect">
            <summary>
            Class that describes the dialect for Sql Server.
            </summary>
        </member>
        <member name="M:Passive.Dialect.SqlServerDialect.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Passive.Dialect.SqlServerDialect"/> class.
            </summary>
        </member>
        <member name="M:Passive.Dialect.SqlServerDialect.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Passive.Dialect.SqlServerDialect"/> class.
            </summary>
            <param name="version">The version of the SQL server.</param>
        </member>
        <member name="M:Passive.Dialect.SqlServerDialect.GetPagingSql(System.String,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Gets the SQL statement for paging given the supplied information.
            </summary>
            <param name="tableName">Name of the table.</param>
            <param name="columns">The columns.</param>
            <param name="orderBy">The order by.</param>
            <param name="where">The where.</param>
            <param name="pageSize">Size of the page.</param>
            <param name="currentPage">The current page.</param>
            <returns></returns>
        </member>
        <member name="M:Passive.Dialect.SqlServerDialect.GetIdentitySql">
            <summary>
            Gets the SQL for retrieving the just-inserted identity.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Passive.ColumnIgnoreAttribute">
            <summary>
            Attribute that ignores the column in Passive operations.
            </summary>
        </member>
        <member name="T:Passive.ColumnNameAttribute">
            <summary>
            Attribute that defines the name of the column in Passive operations.
            </summary>
        </member>
        <member name="M:Passive.ColumnNameAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Passive.ColumnNameAttribute"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="P:Passive.ColumnNameAttribute.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <value>
            The name.
            </value>
        </member>
        <member name="T:Passive.DatabaseDetector">
            <summary>
            Class that probes for databases in a default manner.
            </summary>
        </member>
        <member name="T:Passive.IDatabaseDetector">
            <summary>
            Interface that describes a way of detecting the database
            </summary>
        </member>
        <member name="M:Passive.IDatabaseDetector.Probe(Passive.DynamicDatabase,System.String,System.String)">
            <summary>
            Probes the specified database.
            </summary>
        </member>
        <member name="M:Passive.DatabaseDetector.Probe(Passive.DynamicDatabase,System.String,System.String)">
            <summary>
            Probes the specified database.
            </summary>
        </member>
        <member name="T:Passive.DynamicCommand">
            <summary>
              A class that represents a SQL command.
            </summary>
        </member>
        <member name="P:Passive.DynamicCommand.Sql">
            <summary>
            Gets or sets the SQL.
            </summary>
            <value>
            The SQL.
            </value>
        </member>
        <member name="P:Passive.DynamicCommand.Context">
            <summary>
            Gets or sets the context for the call. This is a user-readable string used for logging.
            </summary>
            <value>
            The context.
            </value>
        </member>
        <member name="P:Passive.DynamicCommand.Arguments">
            <summary>
            Gets or sets the arguments.
            </summary>
            <value>
            The arguments.
            </value>
        </member>
        <member name="T:Passive.DynamicDatabase">
            <summary>
              A class that wraps your database in Dynamic Funtime
            </summary>
        </member>
        <member name="M:Passive.DynamicDatabase.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Passive.DynamicDatabase"/> class.
            </summary>
        </member>
        <member name="M:Passive.DynamicDatabase.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Passive.DynamicDatabase"/> class.
            </summary>
            <param name="connectionStringName">Name of the connection string.</param>
        </member>
        <member name="M:Passive.DynamicDatabase.#ctor(Passive.Dialect.DatabaseDialect,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Passive.DynamicDatabase"/> class.
            </summary>
            <param name="dialect">The dialect.</param>
            <param name="connectionStringName">Name of the connection string.</param>
        </member>
        <member name="M:Passive.DynamicDatabase.#ctor(System.String,System.Collections.Generic.IEnumerable{Passive.IDatabaseDetector})">
            <summary>
            Initializes a new instance of the <see cref="T:Passive.DynamicDatabase"/> class.
            </summary>
            <param name="connectionStringName">Name of the connection string.</param>
            <param name="databaseDetectors">Classes used to probe the database.</param>
        </member>
        <member name="M:Passive.DynamicDatabase.#ctor(Passive.Dialect.DatabaseDialect,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Passive.DynamicDatabase"/> class.
            </summary>
            <param name="dialect">The dialect.</param>
            <param name="connectionString">Database connection string</param>
            <param name="providerName">Invariant name of the database provider</param>
        </member>
        <member name="M:Passive.DynamicDatabase.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Passive.DynamicDatabase"/> class.
            </summary>
            <param name="connectionString">Database connection string</param>
            <param name="providerName">Invariant name of the database provider</param>
        </member>
        <member name="M:Passive.DynamicDatabase.#ctor(System.String,System.String,System.Collections.Generic.IEnumerable{Passive.IDatabaseDetector})">
            <summary>
            Initializes a new instance of the <see cref="T:Passive.DynamicDatabase"/> class.
            </summary>
            <param name="connectionString">Database connection string</param>
            <param name="providerName">Invariant name of the database provider</param>
            <param name="databaseDetectors">Classes used to probe the database.</param>
        </member>
        <member name="M:Passive.DynamicDatabase.Query(System.String,System.Object[])">
            <summary>
              Enumerates the reader yielding the result
            </summary>
        </member>
        <member name="M:Passive.DynamicDatabase.Query(Passive.DynamicCommand)">
            <summary>
              Enumerates the reader yielding the results
            </summary>
        </member>
        <member name="M:Passive.DynamicDatabase.Fetch(System.String,System.Object[])">
            <summary>
              Runs a query against the database.
            </summary>
        </member>
        <member name="M:Passive.DynamicDatabase.Fetch(Passive.DynamicCommand)">
            <summary>
              Runs a query against the database.
            </summary>
        </member>
        <member name="M:Passive.DynamicDatabase.Scalar(System.String,System.Object[])">
            <summary>
              Returns a single result
            </summary>
        </member>
        <member name="M:Passive.DynamicDatabase.Scalar(Passive.DynamicCommand)">
            <summary>
              Returns a single result
            </summary>
        </member>
        <member name="M:Passive.DynamicDatabase.ExecuteTransaction(Passive.DynamicCommand[])">
            <summary>
              Executes a series of DBCommands in a transaction
            </summary>
        </member>
        <member name="M:Passive.DynamicDatabase.Execute(System.String,System.Object[])">
            <summary>
              Executes a single DBCommand
            </summary>
        </member>
        <member name="M:Passive.DynamicDatabase.Execute(Passive.DynamicCommand[])">
            <summary>
              Executes a series of DBCommands
            </summary>
        </member>
        <member name="M:Passive.DynamicDatabase.Execute(System.Collections.Generic.IEnumerable{Passive.DynamicCommand},System.Boolean)">
            <summary>
              Executes a series of DBCommands optionally in a transaction
            </summary>
        </member>
        <member name="M:Passive.DynamicDatabase.GetTable(System.String,System.String)">
            <summary>
              Gets a table in the database.
            </summary>
        </member>
        <member name="M:Passive.DynamicDatabase.OpenConnection">
            <summary>
              Returns a database connection.
            </summary>
        </member>
        <member name="P:Passive.DynamicDatabase.Dialect">
            <summary>
            Gets the capabilities for this database.
            </summary>
        </member>
        <member name="T:Passive.DynamicModel">
            <summary>
              A class that wraps your database table in Dynamic Funtime
            </summary>
        </member>
        <member name="M:Passive.DynamicModel.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Passive.DynamicModel"/> class.
            </summary>
            <param name="connectionStringName">Name of the connection string.</param>
            <param name="tableName">Name of the table.</param>
            <param name="primaryKeyField">The primary key field.</param>
        </member>
        <member name="M:Passive.DynamicModel.#ctor(Passive.DynamicDatabase,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Passive.DynamicModel"/> class.
            </summary>
            <param name="database">The database.</param>
            <param name="tableName">Name of the table.</param>
            <param name="primaryKeyField">The primary key field.</param>
        </member>
        <member name="M:Passive.DynamicModel.BuildCommands(System.Object[])">
            <summary>
              Builds a set of Insert and Update commands based on the passed-on objects.
              These objects can be POCOs, Anonymous, NameValueCollections, or Expandos. Objects With a PK property (whatever PrimaryKeyField is set to) will be created at UPDATEs
            </summary>
        </member>
        <member name="M:Passive.DynamicModel.BuildCommandsWithWhitelist(System.Object,System.Object[])">
            <summary>
              Builds a set of Insert and Update commands based on the passed-on objects.
              These objects can be POCOs, Anonymous, NameValueCollections, or Expandos. Objects With a PK property (whatever PrimaryKeyField is set to) will be created at UPDATEs
            </summary>
        </member>
        <member name="M:Passive.DynamicModel.Save(System.Object[])">
            <summary>
              Executes a set of objects as Insert or Update commands based on their property settings, within a transaction.
              These objects can be POCOs, Anonymous, NameValueCollections, or Expandos. Objects With a PK property (whatever PrimaryKeyField is set to) will be created at UPDATEs
            </summary>
        </member>
        <member name="M:Passive.DynamicModel.SaveWithWhitelist(System.Object,System.Object[])">
            <summary>
              Executes a set of objects as Insert or Update commands based on their property settings, within a transaction.
              These objects can be POCOs, Anonymous, NameValueCollections, or Expandos. Objects With a PK property (whatever PrimaryKeyField is set to) will be created at UPDATEs
            </summary>
        </member>
        <member name="M:Passive.DynamicModel.HasPrimaryKey(System.Object)">
            <summary>
              Conventionally introspects the object passed in for a field that  looks like a PK. If you've named your PrimaryKeyField, this becomes easy
            </summary>
        </member>
        <member name="M:Passive.DynamicModel.GetPrimaryKey(System.Object)">
            <summary>
              If the object passed in has a property with the same name as your PrimaryKeyField it is returned here.
            </summary>
        </member>
        <member name="M:Passive.DynamicModel.CreateInsertCommand(System.Object,System.Object)">
            <summary>
              Creates a command for use with transactions - internal stuff mostly, but here for you to play with
            </summary>
        </member>
        <member name="M:Passive.DynamicModel.CreateUpdateCommand(System.Object,System.Object,System.Object)">
            <summary>
              Creates a command for use with transactions - internal stuff mostly, but here for you to play with
            </summary>
        </member>
        <member name="M:Passive.DynamicModel.CreateDeleteCommand(System.Object,System.Object,System.Object[])">
            <summary>
              Removes one or more records from the DB according to the passed-in WHERE
            </summary>
        </member>
        <member name="M:Passive.DynamicModel.Insert(System.Object,System.Object)">
            <summary>
              Adds a record to the database. You can pass in an Anonymous object, an ExpandoObject, 
              A regular old POCO, or a NameValueColletion from a Request.Form or Request.QueryString
            </summary>
        </member>
        <member name="M:Passive.DynamicModel.Update(System.Object,System.Object,System.Object)">
            <summary>
              Updates a record in the database. You can pass in an Anonymous object, an ExpandoObject,
              A regular old POCO, or a NameValueCollection from a Request.Form or Request.QueryString
            </summary>
        </member>
        <member name="M:Passive.DynamicModel.Delete(System.Object,System.Object,System.Object[])">
            <summary>
              Removes one or more records from the DB according to the passed-in WHERE
            </summary>
        </member>
        <member name="M:Passive.DynamicModel.All(System.Object,System.String,System.Int32,System.Object,System.Object[])">
            <summary>
              Returns all records complying with the passed-in WHERE clause and arguments,  ordered as specified, limited (TOP) by limit.
            </summary>
        </member>
        <member name="M:Passive.DynamicModel.Paged(System.Object,System.String,System.Object,System.Int32,System.Int32,System.Object[])">
            <summary>
              Returns a dynamic PagedResult. Result properties are Items, TotalPages, and TotalRecords.
            </summary>
        </member>
        <member name="M:Passive.DynamicModel.Single(System.Object,System.Object,System.Object,System.Object[])">
            <summary>
              Returns a single row from the database
            </summary>
        </member>
        <member name="P:Passive.DynamicModel.Database">
            <summary>
              Gets the database for this model.
            </summary>
        </member>
        <member name="P:Passive.DynamicModel.PrimaryKeyField">
            <summary>
              Gets or sets the primary key for this model.
            </summary>
        </member>
        <member name="P:Passive.DynamicModel.TableName">
            <summary>
              Gets or sets the table name for this model.
            </summary>
        </member>
        <member name="T:Passive.ObjectExtensions">
            <summary>
            Various extensions for objects.
            </summary>
        </member>
        <member name="M:Passive.ObjectExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
              Extension method for performing an action against all elements.
            </summary>
        </member>
        <member name="M:Passive.ObjectExtensions.AddParams(System.Data.Common.DbCommand,System.Collections.Generic.IEnumerable{System.Object})">
            <summary>
              Extension method for adding in a bunch of parameters
            </summary>
        </member>
        <member name="M:Passive.ObjectExtensions.AddParam(System.Data.Common.DbCommand,System.Object)">
            <summary>
              Extension for adding single parameter
            </summary>
        </member>
        <member name="M:Passive.ObjectExtensions.ToExpando(System.Object)">
            <summary>
              Turns the object into an ExpandoObject
            </summary>
        </member>
        <member name="M:Passive.ObjectExtensions.ToDictionary(System.Object)">
            <summary>
              Turns the object into a Dictionary
            </summary>
        </member>
    </members>
</doc>
